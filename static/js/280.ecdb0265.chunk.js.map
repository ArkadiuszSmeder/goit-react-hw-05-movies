{"version":3,"file":"static/js/280.ecdb0265.chunk.js","mappings":"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","sources":["styled/styled-SearchBox.js","components/SearchBox.jsx","pages/Movies.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  margin-bottom: 16px;\n  text-transform: uppercase;\n`;\n\nexport const Input = styled.input`\n  // padding: 8px 32px 8px 8px;\n  border-radius: 4px;\n  font: inherit;\n`;","import { Wrapper, Input } from \"styled/styled-SearchBox\";\n\nexport const SearchBox = ({ value, onChange }) => {\n  return (\n    <Wrapper>\n      <Input type=\"text\" value={value} onChange={(e) => onChange(e.target.value)}/>\n    </Wrapper>\n  );\n};","import { useSearchParams, Link } from \"react-router-dom\";\nimport { SearchBox } from \"../components/SearchBox\";\nimport React, { useState, useEffect } from 'react';\nimport { useQuery } from \"react-query\";\n\nconst Movies = () => {\n\n  const [searchParams, setSearchParams] = useSearchParams(); // hook do przechowywania zmiennych wyszukiwania \n  const movieName = searchParams.get(\"query\") ?? \"\"; // zmienna movieName pobrana z searchParams i uzywana w getMovieByName\n\n\n  const updateQueryString = (query) => {\n    const nextParams = query !== \"\" ? { query } : {};\n    setSearchParams(nextParams);\n  }; // funkcja do obsługi imputa i zmiany wartości search params\n\n  const getMovieByName = async () => {\n\n    const query = `https://api.themoviedb.org/3/search/movie?query=${movieName}&api_key=fcef3f7d90b41f3f85ee0cce371ea367`\n    const response = await fetch(query)\n    if (!response.ok) {\n      throw new Error('Network response was not ok')\n    }\n    return response.json()\n  }\n\n  const [movieList, setMovieList] = useState([]) //hook do przechowywania obiekty wyszukowanych filmów\n\n  const { refetch } = useQuery({\n    queryKey: ['movie-list'],\n    queryFn: () => getMovieByName(),\n    enabled: false,\n    onSuccess: (movieList) => {\n      setMovieList(movieList.results)\n      console.log(movieList)\n      console.log(movieList.results.length)\n    }\n  }); //przeładowuje obiekt w zalożności od wprowadzonego słowa wyszukiwania movieName\n\n  const handleSearch = () => {\n    refetch();\n  }; // wyszukuje filmu po kliknieciu na przycisk\n\n  useEffect(() => {\n    if (movieName) {\n      refetch();\n    }\n  }, [movieName, refetch]); //zwraca liste filmów przy cofnięciu do poprzedniej strony - pusta tablica dependencies\n\n  return (\n    <main>\n      <SearchBox value={movieName} onChange={updateQueryString} />\n      <button onClick={handleSearch}>Search</button>\n      <div>\n        {movieList && movieList.length > 0 ? (\n          <ul>\n            {movieList.map(movie => (\n              <li key={movie.id}>\n                <Link to={`/movies/${movie.id}`} state={{from: `/movies?query=${movieName}`}}>\n                {movie.original_title}\n                </Link>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>No movies found</p>\n        )}\n      </div>\n    </main>\n  );\n};\n\nexport default Movies;\n\n\n// import { useSearchParams } from \"react-router-dom\";\n\n// export const Movies = () => {\n//   const [searchParams, setSearchParams] = useSearchParams();\n//   const name = searchParams.get(\"name\");\n\n//   return (\n//     <div>\n//       <input type=\"text\" value={name} onChange={e => setSearchParams({ name: e.target.value })}/>\n//     </div>\n//   );\n// };\n\n// export default Movies;\n\n\n\n//========================================================== do movieList tak było\n\n// useQuery({\n//   queryKey: ['movie-list'],\n//   queryFn: () => getMovieByName(),\n//   onSuccess: (movieList) => {\n//     setMovieList(movieList)\n//     console.log(movieList)\n//   }\n// });\n\n// return (\n//   <main>\n//     <SearchBox value={movietName} onChange={updateQueryString} />\n//     <button>Search</button>\n//     <div>\n//       <h2>Filmiki</h2>\n//     </div>\n//   </main>\n// );\n// };","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","Input","_templateObject2","SearchBox","_ref","value","onChange","_jsx","children","type","e","target","_searchParams$get","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","movieName","get","getMovieByName","_asyncToGenerator","_regeneratorRuntime","_callee","query","response","_context","prev","next","concat","fetch","sent","ok","Error","abrupt","json","stop","apply","arguments","_useState","useState","_useState2","movieList","setMovieList","_useQuery","useQuery","queryKey","queryFn","enabled","onSuccess","results","console","log","length","refetch","useEffect","_jsxs","onClick","map","movie","Link","to","id","state","from","original_title","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","fn","self","this","args","err","undefined"],"sourceRoot":""}